//конфиг может быть разбит на 6 частей
//extends - позволяет установить какие нибудь внешние зависимости, например можно поставить уже готовый конфиг
//files - подходит для маленьких проектов в тут в виде массива перечисляются нужные файлики для отслеживания
//include - указывает директории в которых находятся файлы для компиляции / exclude наоборот исключает что то
//compilerOptions - настройка компилятора самая главная часть
// reference и typeAcquisition почти не встречающиеся части для настройки в конфиге каких то IDE фишек

{
    "compilerOptions": {
        "target": "ES2015", //поле определяет в какой формат все будет преобразовано
        "lib": ["ES2015", "ES2016", "DOM"], //наличие либы позволяет использовать типы например из дома или обеспечить поддержку полифилов для старых версий языка  но сейчас вроде это писать не обязательно все идет из коробки + как правило этим в сборке занимается бабел плагин
        "module": "ES2015", //поле говорит от том какую модульную симстему будет иметь приложение после компиляции и зависит от требований проекта
        "moduleResolution": "Node", //поле относиться к настройке модульной системы выше не до конца понял суть
        "outDir": "./build", // просто выходная папка куда все компилируется
        // "outFile": "", можно собрать все в один файл
        "isolatedModules": true, // включает режим модулей для файлов
        "esModuleInterop": true, // включает поддержку классических импортов
        "allowSyntheticDefaultImports": true, //включает поддержку классических импортов для либ
        "forceConsistentCasingInFileNames": true, // не дает делать импорты без учёта регистра
        "downlevelIteration": true, //что то типа помошника для полифила из коробки не понял суть
        "declaration": false, // штука нужна если мы пишем либу что бы создавались файлики декларации типов
        //"declarationDir": "", а это куда будут собираться эти файлики декларации
        "skipLibCheck": true,
        //"noEmit": true // говорит что используем ts только для разработки а компиляцией заниматься будет что то другое
        "importHelpers": true, // поле позвлит сказать компилятору что если для преобразования нужны дополнительные полифилы скажи мне об этом
        "allowJs": true, // если у нас период миграции на ts позволь файлам с расширением js остаться
        "checkJs": false, // говорю не проверять файлы включённые выше
        "resolveJsonModule": true, // разрешить импорты из файлов с раширением json
        "jsx": "react-jsx", // если используем реакт для правильной обработки
        "strict": true,
        "noImplicitReturns": true, //заставляет всегда явно указвать return
        "noFallthroughCasesInSwitch": true //азставляет не забывать break в switch
        // "noUnusedLocals": true подсвечивает не используемые переменные
    },
    "include": ["src"], //вот тебе сущности - наблюдай
    "exclude": ["node_modules", "src/**/*.stories.*", "src/**/mock/*"] // за чем явно не нужно следить в рантайме и что не нужно компилировать в процессе сборки, перечислить в массиве
    // "files": [] //ну и перечисляю только то зачем нужно следить , крайне редкий кейс

    //? например для дев сборки можно создать новый конфиг в корне и заэкстендить основной конфиг но переопределить некоторые поля ниже пример я пишу что сурс мапы нужны и режим ватч  команда tsc -p ./path/to/tsconfig.json
    //"extends": "ссылка на конфиг" и ниже переопределяю
    // "compilerOptions": {
    //   "sourceMap": true,
    //   "watch": true
    // }
}
